abline(v = 3.219953, col = "red", lty = 3, lwd = 2)
abline(v = beta1_hat, col = 'black', lty = 1, lwd = 2) # Made MLE line solid
# 5. ADD A LEGEND
legend("topright",
legend = c("Normalized Likelihood", "MLE of Beta1", "95% CI Cutoff"),
col = c("darkred", "black", "green"),
lty = c(1, 1, 2),
lwd = 2,
bty = "n")
abline(h = cutoff_normalized, col = "green", lty = 2, lwd = 2)
summary(model)
# LOG LIKLIHOOD PROFILE
length <- 200
beta1_hat <- model$coefficients[2]
beta0_hat <- model$coefficients[1]
upper_beta1 = beta1_hat +  0.1
lower_beta1 = beta1_hat -  0.1
beta1_grid <- seq(lower_beta1 , upper_beta1, 0.0001)
beta1_likelihood_grid <- numeric(length)
for(i in 1 : length(beta1_grid)) {
beta1 <- beta1_grid[i]
params <- c(beta0_hat,beta1)
beta1_likelihood_grid[i] <- -1 * neg_log_likelihood(params = params,
X = data$log_gdp,
y = data$high_lifeExp)
}
plot(beta1_grid, beta1_likelihood_grid,
type = "l",                      # line plot
col = "darkred",                # line color
lwd = 2,                        # line width
xlab = expression(beta[1]),     # x-axis label with math notation
ylab = "Likelihood",            # y-axis label
main = "Likelihood vs Beta1")   # plot title
# Add a vertical dashed blue line at beta1 = 1.591683
#abline(v = 1.591683, col = "blue", lty = 3, lwd = 2)
#abline(v = 3.106073, col = "blue", lty = 3, lwd = 2)
abline(v =  1.68580, col = "red", lty = 3, lwd = 2)
abline(v = 3.219953, col = "red", lty = 3, lwd = 2)
abline(v = beta1_hat, col = 'black',lty = 3, lwd = 2)
max_log_likelihood <- max(beta1_likelihood_grid)
# Your existing code to generate the log-likelihood grid
# ... (assuming beta1_likelihood_grid and beta1_hat are in your environment)
# ...
# 1. NORMALIZE THE LIKELIHOOD
# This creates a grid where the peak is 1
max_log_likelihood <- max(beta1_likelihood_grid)
normalized_likelihood_grid <- exp(beta1_likelihood_grid - max_log_likelihood)
# 2. PLOT THE NORMALIZED PROFILE
plot(beta1_grid, normalized_likelihood_grid,
type = "l",
col = "darkred",
lwd = 2,
xlab = expression(beta[1]),
ylab = "Normalized Likelihood",  # <-- Changed y-axis label
main = "Normalized Likelihood Profile for Beta1", # <-- Changed title
ylim = c(0, 1.05)) # Set y-axis limits from 0 to just above 1
# 3. ADD THE 95% CONFIDENCE INTERVAL CUTOFF LINE
# On the log-likelihood scale, the cutoff was max_ll - 1.92
# On the normalized likelihood scale, this becomes exp(-1.92)
cutoff_normalized <- exp(-qchisq(0.95, df = 1) / 2)
abline(h = cutoff_normalized, col = "green", lty = 2, lwd = 2)
# 4. ADD YOUR EXISTING VERTICAL LINES
abline(v = 1.591683, col = "blue", lty = 3, lwd = 2)
abline(v = 3.106073, col = "blue", lty = 3, lwd = 2)
abline(v = 1.68580, col = "red", lty = 3, lwd = 2)
abline(v = 3.219953, col = "red", lty = 3, lwd = 2)
abline(v = beta1_hat, col = 'black', lty = 1, lwd = 2) # Made MLE line solid
# 5. ADD A LEGEND
legend("topright",
legend = c("Normalized Likelihood", "MLE of Beta1", "95% CI Cutoff"),
col = c("darkred", "black", "green"),
lty = c(1, 1, 2),
lwd = 2,
bty = "n")
2.35 - 2.28
# Your existing code to generate the log-likelihood grid
# ... (assuming beta1_likelihood_grid and beta1_hat are in your environment)
# ...
# 1. NORMALIZE THE LIKELIHOOD
# This creates a grid where the peak is 1
max_log_likelihood <- max(beta1_likelihood_grid)
normalized_likelihood_grid <- exp(beta1_likelihood_grid - max_log_likelihood)
# 2. PLOT THE NORMALIZED PROFILE
plot(beta1_grid, normalized_likelihood_grid,
type = "l",
col = "darkred",
lwd = 2,
xlab = expression(beta[1]),
ylab = "Normalized Likelihood",  # <-- Changed y-axis label
main = "Normalized Likelihood Profile for Beta1", # <-- Changed title
ylim = c(0, 1.05)) # Set y-axis limits from 0 to just above 1
# 3. ADD THE 95% CONFIDENCE INTERVAL CUTOFF LINE
# On the log-likelihood scale, the cutoff was max_ll - 1.92
# On the normalized likelihood scale, this becomes exp(-1.92)
cutoff_normalized <- exp(-qchisq(0.95, df = 2) / 2)
abline(h = cutoff_normalized, col = "green", lty = 2, lwd = 2)
# 4. ADD YOUR EXISTING VERTICAL LINES
abline(v = 1.591683, col = "blue", lty = 3, lwd = 2)
abline(v = 3.106073, col = "blue", lty = 3, lwd = 2)
abline(v = 1.68580, col = "red", lty = 3, lwd = 2)
abline(v = 3.219953, col = "red", lty = 3, lwd = 2)
abline(v = beta1_hat, col = 'black', lty = 1, lwd = 2) # Made MLE line solid
# 5. ADD A LEGEND
legend("topright",
legend = c("Normalized Likelihood", "MLE of Beta1", "95% CI Cutoff"),
col = c("darkred", "black", "green"),
lty = c(1, 1, 2),
lwd = 2,
bty = "n")
# Your existing code to generate the log-likelihood grid
# ... (assuming beta1_likelihood_grid and beta1_hat are in your environment)
# ...
# 1. NORMALIZE THE LIKELIHOOD
# This creates a grid where the peak is 1
max_log_likelihood <- max(beta1_likelihood_grid)
normalized_likelihood_grid <- exp(beta1_likelihood_grid - max_log_likelihood)
# 2. PLOT THE NORMALIZED PROFILE
plot(beta1_grid, normalized_likelihood_grid,
type = "l",
col = "darkred",
lwd = 2,
xlab = expression(beta[1]),
ylab = "Normalized Likelihood",  # <-- Changed y-axis label
main = "Normalized Likelihood Profile for Beta1", # <-- Changed title
ylim = c(0, 1.05)) # Set y-axis limits from 0 to just above 1
# 3. ADD THE 95% CONFIDENCE INTERVAL CUTOFF LINE
# On the log-likelihood scale, the cutoff was max_ll - 1.92
# On the normalized likelihood scale, this becomes exp(-1.92)
cutoff_normalized <- exp(-qchisq(0.95, df = 1) / 2)
abline(h = cutoff_normalized, col = "green", lty = 2, lwd = 2)
# 4. ADD YOUR EXISTING VERTICAL LINES
abline(v = 1.591683, col = "blue", lty = 3, lwd = 2)
abline(v = 3.106073, col = "blue", lty = 3, lwd = 2)
abline(v = 1.68580, col = "red", lty = 3, lwd = 2)
abline(v = 3.219953, col = "red", lty = 3, lwd = 2)
abline(v = beta1_hat, col = 'black', lty = 1, lwd = 2) # Made MLE line solid
# 5. ADD A LEGEND
legend("topright",
legend = c("Normalized Likelihood", "MLE of Beta1", "95% CI Cutoff"),
col = c("darkred", "black", "green"),
lty = c(1, 1, 2),
lwd = 2,
bty = "n")
# LOG LIKLIHOOD PROFILE
length <- 200
beta1_hat <- model$coefficients[2]
beta0_hat <- model$coefficients[1]
upper_beta1 = beta1_hat +  0.2
lower_beta1 = beta1_hat -  0.2
beta1_grid <- seq(lower_beta1 , upper_beta1, 0.0001)
beta1_likelihood_grid <- numeric(length)
for(i in 1 : length(beta1_grid)) {
beta1 <- beta1_grid[i]
params <- c(beta0_hat,beta1)
beta1_likelihood_grid[i] <- -1 * neg_log_likelihood(params = params,
X = data$log_gdp,
y = data$high_lifeExp)
}
plot(beta1_grid, beta1_likelihood_grid,
type = "l",                      # line plot
col = "darkred",                # line color
lwd = 2,                        # line width
xlab = expression(beta[1]),     # x-axis label with math notation
ylab = "Likelihood",            # y-axis label
main = "Likelihood vs Beta1")   # plot title
# Add a vertical dashed blue line at beta1 = 1.591683
#abline(v = 1.591683, col = "blue", lty = 3, lwd = 2)
#abline(v = 3.106073, col = "blue", lty = 3, lwd = 2)
abline(v =  1.68580, col = "red", lty = 3, lwd = 2)
abline(v = 3.219953, col = "red", lty = 3, lwd = 2)
abline(v = beta1_hat, col = 'black',lty = 3, lwd = 2)
max_log_likelihood <- max(beta1_likelihood_grid)
# 1. NORMALIZE THE LIKELIHOOD
# This creates a grid where the peak is 1
max_log_likelihood <- max(beta1_likelihood_grid)
normalized_likelihood_grid <- exp(beta1_likelihood_grid - max_log_likelihood)
# 2. PLOT THE NORMALIZED PROFILE
plot(beta1_grid, normalized_likelihood_grid,
type = "l",
col = "darkred",
lwd = 2,
xlab = expression(beta[1]),
ylab = "Normalized Likelihood",  # <-- Changed y-axis label
main = "Normalized Likelihood Profile for Beta1", # <-- Changed title
ylim = c(0, 1.05)) # Set y-axis limits from 0 to just above 1
# 3. ADD THE 95% CONFIDENCE INTERVAL CUTOFF LINE
# On the log-likelihood scale, the cutoff was max_ll - 1.92
# On the normalized likelihood scale, this becomes exp(-1.92)
cutoff_normalized <- exp(-qchisq(0.95, df = 1) / 2)
abline(h = cutoff_normalized, col = "green", lty = 2, lwd = 2)
# 4. ADD YOUR EXISTING VERTICAL LINES
abline(v = 1.591683, col = "blue", lty = 3, lwd = 2)
abline(v = 3.106073, col = "blue", lty = 3, lwd = 2)
abline(v = 1.68580, col = "red", lty = 3, lwd = 2)
abline(v = 3.219953, col = "red", lty = 3, lwd = 2)
abline(v = beta1_hat, col = 'black', lty = 1, lwd = 2) # Made MLE line solid
# 5. ADD A LEGEND
legend("topright",
legend = c("Normalized Likelihood", "MLE of Beta1", "95% CI Cutoff"),
col = c("darkred", "black", "green"),
lty = c(1, 1, 2),
lwd = 2,
bty = "n")
# LOG LIKLIHOOD PROFILE
length <- 200
beta1_hat <- model$coefficients[2]
beta0_hat <- model$coefficients[1]
upper_beta1 = beta1_hat +  1
lower_beta1 = beta1_hat -  1
beta1_grid <- seq(lower_beta1 , upper_beta1, 0.0001)
beta1_likelihood_grid <- numeric(length)
for(i in 1 : length(beta1_grid)) {
beta1 <- beta1_grid[i]
params <- c(beta0_hat,beta1)
beta1_likelihood_grid[i] <- -1 * neg_log_likelihood(params = params,
X = data$log_gdp,
y = data$high_lifeExp)
}
plot(beta1_grid, beta1_likelihood_grid,
type = "l",                      # line plot
col = "darkred",                # line color
lwd = 2,                        # line width
xlab = expression(beta[1]),     # x-axis label with math notation
ylab = "Likelihood",            # y-axis label
main = "Likelihood vs Beta1")   # plot title
# Add a vertical dashed blue line at beta1 = 1.591683
#abline(v = 1.591683, col = "blue", lty = 3, lwd = 2)
#abline(v = 3.106073, col = "blue", lty = 3, lwd = 2)
abline(v =  1.68580, col = "red", lty = 3, lwd = 2)
abline(v = 3.219953, col = "red", lty = 3, lwd = 2)
abline(v = beta1_hat, col = 'black',lty = 3, lwd = 2)
max_log_likelihood <- max(beta1_likelihood_grid)
# LOG LIKLIHOOD PROFILE
length <- 200
beta1_hat <- model$coefficients[2]
beta0_hat <- model$coefficients[1]
upper_beta1 = beta1_hat +  2
lower_beta1 = beta1_hat -  0.7
beta1_grid <- seq(lower_beta1 , upper_beta1, 0.0001)
beta1_likelihood_grid <- numeric(length)
for(i in 1 : length(beta1_grid)) {
beta1 <- beta1_grid[i]
params <- c(beta0_hat,beta1)
beta1_likelihood_grid[i] <- -1 * neg_log_likelihood(params = params,
X = data$log_gdp,
y = data$high_lifeExp)
}
plot(beta1_grid, beta1_likelihood_grid,
type = "l",                      # line plot
col = "darkred",                # line color
lwd = 2,                        # line width
xlab = expression(beta[1]),     # x-axis label with math notation
ylab = "Likelihood",            # y-axis label
main = "Likelihood vs Beta1")   # plot title
# Add a vertical dashed blue line at beta1 = 1.591683
#abline(v = 1.591683, col = "blue", lty = 3, lwd = 2)
#abline(v = 3.106073, col = "blue", lty = 3, lwd = 2)
abline(v =  1.68580, col = "red", lty = 3, lwd = 2)
abline(v = 3.219953, col = "red", lty = 3, lwd = 2)
abline(v = beta1_hat, col = 'black',lty = 3, lwd = 2)
max_log_likelihood <- max(beta1_likelihood_grid)
# LOG LIKLIHOOD PROFILE
length <- 200
beta1_hat <- model$coefficients[2]
beta0_hat <- model$coefficients[1]
upper_beta1 = beta1_hat +  10
lower_beta1 = beta1_hat -  0.7
beta1_grid <- seq(lower_beta1 , upper_beta1, 0.0001)
beta1_likelihood_grid <- numeric(length)
for(i in 1 : length(beta1_grid)) {
beta1 <- beta1_grid[i]
params <- c(beta0_hat,beta1)
beta1_likelihood_grid[i] <- -1 * neg_log_likelihood(params = params,
X = data$log_gdp,
y = data$high_lifeExp)
}
plot(beta1_grid, beta1_likelihood_grid,
type = "l",                      # line plot
col = "darkred",                # line color
lwd = 2,                        # line width
xlab = expression(beta[1]),     # x-axis label with math notation
ylab = "Likelihood",            # y-axis label
main = "Likelihood vs Beta1")   # plot title
# Add a vertical dashed blue line at beta1 = 1.591683
#abline(v = 1.591683, col = "blue", lty = 3, lwd = 2)
#abline(v = 3.106073, col = "blue", lty = 3, lwd = 2)
abline(v =  1.68580, col = "red", lty = 3, lwd = 2)
abline(v = 3.219953, col = "red", lty = 3, lwd = 2)
abline(v = beta1_hat, col = 'black',lty = 3, lwd = 2)
max_log_likelihood <- max(beta1_likelihood_grid)
# LOG LIKLIHOOD PROFILE
length <- 200
beta1_hat <- model$coefficients[2]
beta0_hat <- model$coefficients[1]
upper_beta1 = beta1_hat +  1
lower_beta1 = beta1_hat -  0.7
beta1_grid <- seq(lower_beta1 , upper_beta1, 0.0001)
beta1_likelihood_grid <- numeric(length)
for(i in 1 : length(beta1_grid)) {
beta1 <- beta1_grid[i]
params <- c(beta0_hat,beta1)
beta1_likelihood_grid[i] <- -1 * neg_log_likelihood(params = params,
X = data$log_gdp,
y = data$high_lifeExp)
}
plot(beta1_grid, beta1_likelihood_grid,
type = "l",                      # line plot
col = "darkred",                # line color
lwd = 2,                        # line width
xlab = expression(beta[1]),     # x-axis label with math notation
ylab = "Likelihood",            # y-axis label
main = "Likelihood vs Beta1")   # plot title
# Add a vertical dashed blue line at beta1 = 1.591683
#abline(v = 1.591683, col = "blue", lty = 3, lwd = 2)
#abline(v = 3.106073, col = "blue", lty = 3, lwd = 2)
abline(v =  1.68580, col = "red", lty = 3, lwd = 2)
abline(v = 3.219953, col = "red", lty = 3, lwd = 2)
abline(v = beta1_hat, col = 'black',lty = 3, lwd = 2)
max_log_likelihood <- max(beta1_likelihood_grid)
# LOG LIKLIHOOD PROFILE
length <- 200
beta1_hat <- model$coefficients[2]
beta0_hat <- model$coefficients[1]
upper_beta1 = beta1_hat +  1
lower_beta1 = beta1_hat -  0.9
beta1_grid <- seq(lower_beta1 , upper_beta1, 0.0001)
beta1_likelihood_grid <- numeric(length)
for(i in 1 : length(beta1_grid)) {
beta1 <- beta1_grid[i]
params <- c(beta0_hat,beta1)
beta1_likelihood_grid[i] <- -1 * neg_log_likelihood(params = params,
X = data$log_gdp,
y = data$high_lifeExp)
}
plot(beta1_grid, beta1_likelihood_grid,
type = "l",                      # line plot
col = "darkred",                # line color
lwd = 2,                        # line width
xlab = expression(beta[1]),     # x-axis label with math notation
ylab = "Likelihood",            # y-axis label
main = "Likelihood vs Beta1")   # plot title
# Add a vertical dashed blue line at beta1 = 1.591683
#abline(v = 1.591683, col = "blue", lty = 3, lwd = 2)
#abline(v = 3.106073, col = "blue", lty = 3, lwd = 2)
abline(v =  1.68580, col = "red", lty = 3, lwd = 2)
abline(v = 3.219953, col = "red", lty = 3, lwd = 2)
abline(v = beta1_hat, col = 'black',lty = 3, lwd = 2)
max_log_likelihood <- max(beta1_likelihood_grid)
# LOG LIKLIHOOD PROFILE
length <- 200
beta1_hat <- model$coefficients[2]
beta0_hat <- model$coefficients[1]
upper_beta1 = beta1_hat +  1
lower_beta1 = beta1_hat -  0.8
beta1_grid <- seq(lower_beta1 , upper_beta1, 0.0001)
beta1_likelihood_grid <- numeric(length)
for(i in 1 : length(beta1_grid)) {
beta1 <- beta1_grid[i]
params <- c(beta0_hat,beta1)
beta1_likelihood_grid[i] <- -1 * neg_log_likelihood(params = params,
X = data$log_gdp,
y = data$high_lifeExp)
}
plot(beta1_grid, beta1_likelihood_grid,
type = "l",                      # line plot
col = "darkred",                # line color
lwd = 2,                        # line width
xlab = expression(beta[1]),     # x-axis label with math notation
ylab = "Likelihood",            # y-axis label
main = "Likelihood vs Beta1")   # plot title
# Add a vertical dashed blue line at beta1 = 1.591683
#abline(v = 1.591683, col = "blue", lty = 3, lwd = 2)
#abline(v = 3.106073, col = "blue", lty = 3, lwd = 2)
abline(v =  1.68580, col = "red", lty = 3, lwd = 2)
abline(v = 3.219953, col = "red", lty = 3, lwd = 2)
abline(v = beta1_hat, col = 'black',lty = 3, lwd = 2)
max_log_likelihood <- max(beta1_likelihood_grid)
# LOG LIKLIHOOD PROFILE
length <- 200
beta1_hat <- model$coefficients[2]
beta0_hat <- model$coefficients[1]
upper_beta1 = beta1_hat +  1
lower_beta1 = beta1_hat -  3
beta1_grid <- seq(lower_beta1 , upper_beta1, 0.0001)
beta1_likelihood_grid <- numeric(length)
for(i in 1 : length(beta1_grid)) {
beta1 <- beta1_grid[i]
params <- c(beta0_hat,beta1)
beta1_likelihood_grid[i] <- -1 * neg_log_likelihood(params = params,
X = data$log_gdp,
y = data$high_lifeExp)
}
plot(beta1_grid, beta1_likelihood_grid,
type = "l",                      # line plot
col = "darkred",                # line color
lwd = 2,                        # line width
xlab = expression(beta[1]),     # x-axis label with math notation
ylab = "Likelihood",            # y-axis label
main = "Likelihood vs Beta1")   # plot title
# Add a vertical dashed blue line at beta1 = 1.591683
#abline(v = 1.591683, col = "blue", lty = 3, lwd = 2)
#abline(v = 3.106073, col = "blue", lty = 3, lwd = 2)
abline(v =  1.68580, col = "red", lty = 3, lwd = 2)
abline(v = 3.219953, col = "red", lty = 3, lwd = 2)
abline(v = beta1_hat, col = 'black',lty = 3, lwd = 2)
max_log_likelihood <- max(beta1_likelihood_grid)
# LOG LIKLIHOOD PROFILE
length <- 200
beta1_hat <- model$coefficients[2]
beta0_hat <- model$coefficients[1]
upper_beta1 = beta1_hat +  1
lower_beta1 = beta1_hat -  0.8
beta1_grid <- seq(lower_beta1 , upper_beta1, 0.0001)
beta1_likelihood_grid <- numeric(length)
for(i in 1 : length(beta1_grid)) {
beta1 <- beta1_grid[i]
params <- c(beta0_hat,beta1)
beta1_likelihood_grid[i] <- -1 * neg_log_likelihood(params = params,
X = data$log_gdp,
y = data$high_lifeExp)
}
plot(beta1_grid, beta1_likelihood_grid,
type = "l",                      # line plot
col = "darkred",                # line color
lwd = 2,                        # line width
xlab = expression(beta[1]),     # x-axis label with math notation
ylab = "Likelihood",            # y-axis label
main = "Likelihood vs Beta1")   # plot title
# Add a vertical dashed blue line at beta1 = 1.591683
#abline(v = 1.591683, col = "blue", lty = 3, lwd = 2)
#abline(v = 3.106073, col = "blue", lty = 3, lwd = 2)
abline(v =  1.68580, col = "red", lty = 3, lwd = 2)
abline(v = 3.219953, col = "red", lty = 3, lwd = 2)
abline(v = beta1_hat, col = 'black',lty = 3, lwd = 2)
max_log_likelihood <- max(beta1_likelihood_grid)
# Set a seed for reproducibility
set.seed(42)
# 1. Simulate the data
n <- 1000 # Number of observations
# Simulate a random binary outcome (like a coin toss)
# rbinom(n, size = 1, prob = 0.5) generates n random values of 0 or 1
# with a 50% probability for each.
binary_outcome <- rbinom(n, size = 1, prob = 0.5)
# Simulate a random continuous variable from a uniform distribution
continuous_variable <- runif(n, min = 0, max = 100)
# Create a data frame
random_data <- data.frame(continuous_variable, binary_outcome)
# 2. Group the continuous variable
# The cut() function divides the range of the continuous variable into intervals.
num_groups <- 10
random_data$grouped_continuous <- cut(random_data$continuous_variable, breaks = num_groups)
# 3. Calculate the mean of the binary outcome for each group
# Using the dplyr package for easy data manipulation.
# If you don't have it installed, run: install.packages("dplyr")
library(dplyr)
summary_data <- random_data %>%
group_by(grouped_continuous) %>%
summarise(mean_binary_outcome = mean(binary_outcome))
# 4. Plot the results
# Using the ggplot2 package for a clear visualization.
# If you don't have it installed, run: install.packages("ggplot2")
library(ggplot2)
ggplot(summary_data, aes(x = grouped_continuous, y = mean_binary_outcome)) +
geom_point(size = 3) +
geom_hline(yintercept = 0.5, linetype = "dashed", color = "red") + # Add a line for the expected probability
labs(
title = "Mean of Binary Outcome vs. Grouped Continuous Variable (Random Data)",
x = "Groups of Continuous Variable",
y = "Proportion of 'Successes' (Mean of Binary Outcome)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
summary(model)
data
plot(data$lifeExp, data$gdpPercap)
plot( data$gdpPercap, data$lifeExp)
plot( data$gdpPercap, log(data$lifeExp))
plot( data$gdpPercap, log(data$lifeExp))
plot( data$gdpPercap, data$log_gdp)
plot( data$gdpPercap, data$lifeExp)
plot( data$gdpPercap, data$lifeExp)
plot( data$gdpPercap, data$lifeExp)
plot( data$log_gdp, data$lifeExp)
plot( data$gdpPercap, data$lifeExp)
plot( data$log_gdp, data$lifeExp)
plot( data$log_gdp, data$high_lifeExp)
plot( data$gdpPercap, data$lifeExp)
plot( data$gdpPercap, data$high_lifeExp)
plot( data$log_gdp, data$lifeExp)
plot( data$log_gdp, data$high_lifeExp)
plot( data$gdpPercap, data$lifeExp)
plot( data$log_gdp, data$lifeExp)
plot( data$log_gdp, data$high_lifeExp)
summary(data = data, lifeExp ~ log_gdp)
summary(data = data, lifeExp ~ log_gdp)
summary(lm(data = data, lifeExp ~ log_gdp))
plot( data$gdpPercap, data$lifeExp)
plot( data$log_gdp, data$lifeExp)
plot( data$log_gdp, data$high_lifeExp)
abline(median(data$lifeExp))
plot( data$gdpPercap, data$lifeExp)
plot( data$log_gdp, data$lifeExp)
plot( data$log_gdp, data$high_lifeExp)
abline(h = median(data$lifeExp))
plot( data$gdpPercap, data$lifeExp)
plot( data$log_gdp, data$lifeExp)
abline(h = median(data$lifeExp)
plot( data$log_gdp, data$high_lifeExp)
plot( data$gdpPercap, data$lifeExp)
plot( data$log_gdp, data$lifeExp)
abline(h = median(data$lifeExp))
plot( data$log_gdp, data$high_lifeExp)
