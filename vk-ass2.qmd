---
title: "stat-inference-assingment2"
format: html
editor: visual
---

```{r}
library(dplyr)
library(ggplot2)
library(gapminder)

# Prepare data for 2007
data <- gapminder %>%
  filter(year == 2007) %>%
  mutate(
    high_lifeExp = ifelse(lifeExp > median(lifeExp), 1, 0),
    log_gdp = log(gdpPercap)
  )
head(data)
```

```{r}
model <- glm(high_lifeExp ~ log_gdp, data = data, family = 'binomial')
summary(model)

conf_intervals <- confint(model) # skewed dist
wald_conf_intervals <- confint.default(model)# assume asymptotic

print(conf_intervals)
print(wald_conf_intervals)

```

```{r}
log_lik <- function(params, X , y){
  beta0 <- params[1]
  beta1 <- params[2]
  
  log_likelyhood <- sum(-log(1 + exp(beta0 + beta1*X))+ y * (beta0 + beta1*X))
  return (log_likelyhood)
}

init_param <- c(0,0)
result <- optim(par = init_param, 
                fn  = log_lik,
                X = data$log_gdp,
                y = data$high_lifeExp,
                method = "BFGS",
                control = list(fnscale = -1), # maximized instead of minimized
                hessian = TRUE)


# Get MLE of lambda:
mle <- result$par
cat("MLE of lambda: ", mle, "\n")

```

```{r}
result$hessian
```

## PROFILING LOG LIKLIHOOD

```{r}

# LOG LIKLIHOOD PROFILE
length <- 50
beta1_hat <- model$coefficients[2]
beta0_hat <- model$coefficients[1]

upper_beta1 = beta1_hat +  1
lower_beta1 = beta1_hat -  0.8
  
beta1_grid <- seq(lower_beta1 , upper_beta1, 0.0001)
beta1_likelihood_grid <- numeric(length)

for(i in 1 : length(beta1_grid)) {
  beta1 <- beta1_grid[i]
  params <- c(beta0_hat,beta1)

  beta1_likelihood_grid[i] <- log_lik(params = params,
                                                      X = data$log_gdp,
                                                      y = data$high_lifeExp)
}

plot(beta1_grid, beta1_likelihood_grid, 
     type = "l",                      # line plot
     col = "darkred",                # line color
     lwd = 2,                        # line width
     xlab = expression(beta[1]),     # x-axis label with math notation
     ylab = "Likelihood",            # y-axis label
     main = "Likelihood vs Beta1")   # plot title
 
# Add a vertical dashed blue line at beta1 = 1.591683
#abline(v = 1.591683, col = "blue", lty = 3, lwd = 2)
#abline(v = 3.106073, col = "blue", lty = 3, lwd = 2)
abline(v =  1.68580, col = "red", lty = 3, lwd = 2)
abline(v = 3.219953, col = "red", lty = 3, lwd = 2)
abline(v = beta1_hat, col = 'black',lty = 3, lwd = 2)
max_log_likelihood <- max(beta1_likelihood_grid)


```

From the graphic, $\hat\beta1$ profile likelihood curve show a relatively broad and wide curve around it's maximum. This indicated that there is a moderate amount of uncertainty in estimating the true values of $\beta1$. Looking at the 95 confidence interval cut off we can also see that

```{r}
# Assume: data is your dataset with columns log_gdp and high_lifeExp
#         log_lik(beta, x, y) is your function to compute the log-likelihood for one point

n <- nrow(data)                     # number of data points
beta1_grid <- seq(lower_beta1 , upper_beta1, 0.001)  # grid of beta1 values
beta0_hat <- beta0_hat  # replace with your estimated beta0

# Initialize matrix to store log-likelihoods
loglik_matrix <- matrix(NA, nrow = length(beta1_grid), ncol = n)

# Compute log-likelihoods
for (i in 1:length(beta1_grid)) {
  beta1 <- beta1_grid[i]
  for (j in 1:n) {
    loglik_matrix[i, j] <- log_lik(c(beta0_hat, beta1), 
                                   data$log_gdp[j], 
                                   data$high_lifeExp[j])
  }
}

# Optional: Convert log-likelihoods to actual likelihoods if you want
likelihood_matrix <- exp(loglik_matrix)

# Plotting
matplot(beta1_grid, likelihood_matrix, type = "l", lty = 1, lwd = 1.5,
        col = rainbow(n),
        xlab = expression(beta[1]),
        ylab = "Likelihood",
        main = "Likelihood of Each Data Point vs Beta1",
        xlim = c(1.5, 3.5))
legend("topright", legend = paste("Data", 1:n), col = rainbow(n), lty = 1, cex = 0.6)

```

```{r}
plot( data$gdpPercap, data$lifeExp)
plot( data$log_gdp, data$lifeExp)
abline(h = median(data$lifeExp))
plot( data$log_gdp, data$high_lifeExp)


```
